---
layout: til
title:  "Turbo Stream in Rails 7"
date: '2022-09-16'
categories: til rails
author: Sajan Basnet
tags:
toc: true
permalink: '/til/06'
summary: 
uniq_heading_id: '#til-06'
uniq_body_id: 'til-06'
til: true
til_tags: rails
---

<div class="">
<hr>
When working with Turbo Frames, we can only update a single frame at a time that matches the DOM ID by directly interacting with it. However, what if we need to update any part of the page with a single request? In such cases, Turbo Stream comes to the rescue. Turbo Streams let us change any part of the page in response to updates sent over a WebSocket connection, SSE or other transport.

</div>

<div class="">
<hr>
### Turbo Streams Actions

Turbo Streams supports various types of `Actions`, these action with a target ID declares what should happen to HTML inside it.
 
- **Append**: Add new HTML content to the end of the target element.
- **Prepend**: Add new HTML content to the beginning of the target element.
- **Replace**: Replace the whole target element with new HTML content.
- **Update**: Replace only the content of the target element with the given content.
- **Remove**: Remove the target element.
- **Before**: Inserts the new content before the target element.
- **After**: Inserts the new content after the target element.



### Syntax
```ruby
<turbo-stream action="replace" target="message_1">
  <template>
    <div id="message_1">
      This div will replace the existing element with the DOM ID "message_1".
    </div>
  </template>
</turbo-stream>
```
We have a turbo stream helper to write this as 
```ruby
  <%= turbo_stream.replace "message_1", partial: 'partial_file_name', locals: {value1: 'value1'} >
```

Suppose we have an `index` page that displays a `list of users` along with a widget showing the `total user count`. Additionally, each user in the list is accompanied by a delete button.

```html
  <div id="total-user-count">
    Total Users: <%= @users.count %>
  </div>

  <ul>
    <% @users.each do |user| %>
      <li id="#{user}">
        <%= user.name %>
        <%= button_to "Delete", user_path(user), method: :delete, form: { data: { turbo_confirm: "Are you sure?" } }  %>
      </li>
    <% end %>
  </ul>
```

Now in our Users controller `destroy` action we will have

```ruby
  def destroy
    @user = User.find(params[:id])
    respond_to do |format|
      format.turbo_stream
    end
  end
```
This will look for a file called `destroy.turbo_stream.erb` which will look like this

```ruby
  <%= turbo_stream.remove @user %>
  <%= turbo_stream.update "total-user-count", User.count %>
```
<hr>
</div>
